这是一个利用二分查找在区间里寻找最优解的问题.
问题:
传送带上的包裹必须在 D 天内从一个港口运送到另一个港口。

传送带上的第 i 个包裹的重量为 weights[i]。每一天，我们都会按给出重量的顺序往传送带上装载包裹。我们装载的重量不会超过船的最大运载重量。

返回能在 D 天内将传送带上的所有包裹送达的船的最低运载能力。

 

示例 1：

输入：weights = [1,2,3,4,5,6,7,8,9,10], D = 5
输出：15
解释：
船舶最低载重 15 就能够在 5 天内送达所有包裹，如下所示：
第 1 天：1, 2, 3, 4, 5
第 2 天：6, 7
第 3 天：8
第 4 天：9
第 5 天：10

请注意，货物必须按照给定的顺序装运，因此使用载重能力为 14 的船舶并将包装分成 (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) 是不允许的。 

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/capacity-to-ship-packages-within-d-days
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


思路:
首先确定不论如何分配,船舶送量X一定大于wieghts里最大的,而一定小于等于所有weights里元素的总和,在其中查找符合能够在D天内送走的最小X即可.

关键解题点在于:
1.如何模拟每次送货:
2.如何查找;
每次送货:
定义一个变量cur存储每天的运载量,一个need存储当前状况下所需的天数.
首先我们确定一个目标运量(不一定是问题的解),然后如果当天的量cur加上下一个货物weight[i]超过了目标,那么说明新加的weight[i]需要被放在第二天送走.此时清空cur(视为当天货送走了),need=need+1.
如果没有,那就改变cur的值:cur=cur+weight[i]
重复以上循环直到没有weight
查找:
这时查看need的值,大于D说明每次运量太小,小于D说明太大,调整对应的区间
